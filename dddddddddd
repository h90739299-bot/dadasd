local Player = game:GetService("Players").LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- Settings
local Flying = false
local AirWalkEnabled = false
local FlySpeed = 25
local SavedPosition = nil
local AutoFlyingToPosition = false

-- Create main GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "MobileFlyGui"
ScreenGui.Parent = game.CoreGui

-- Main control buttons frame
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 150, 0, 190)
MainFrame.Position = UDim2.new(0, 10, 0.5, -95)
MainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
MainFrame.BackgroundTransparency = 0.3
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 30)
Title.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Text = "Fly Controls"
Title.Font = Enum.Font.GothamBold
Title.Parent = MainFrame

local FlyButton = Instance.new("TextButton")
FlyButton.Size = UDim2.new(0.9, 0, 0, 30)
FlyButton.Position = UDim2.new(0.05, 0, 0, 35)
FlyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
FlyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
FlyButton.Text = "Fly: OFF"
FlyButton.Font = Enum.Font.Gotham
FlyButton.Parent = MainFrame

local BoostButton = Instance.new("TextButton")
BoostButton.Size = UDim2.new(0.9, 0, 0, 30)
BoostButton.Position = UDim2.new(0.05, 0, 0, 70)
BoostButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
BoostButton.TextColor3 = Color3.fromRGB(255, 255, 255)
BoostButton.Text = "BOOST UP"
BoostButton.Font = Enum.Font.Gotham
BoostButton.Parent = MainFrame

local AirWalkButton = Instance.new("TextButton")
AirWalkButton.Size = UDim2.new(0.9, 0, 0, 30)
AirWalkButton.Position = UDim2.new(0.05, 0, 0, 105)
AirWalkButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
AirWalkButton.TextColor3 = Color3.fromRGB(255, 255, 255)
AirWalkButton.Text = "Air Walk: OFF"
AirWalkButton.Font = Enum.Font.Gotham
AirWalkButton.Parent = MainFrame

local SavePosButton = Instance.new("TextButton")
SavePosButton.Size = UDim2.new(0.9, 0, 0, 30)
SavePosButton.Position = UDim2.new(0.05, 0, 0, 140)
SavePosButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SavePosButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SavePosButton.Text = "Save Position"
SavePosButton.Font = Enum.Font.Gotham
SavePosButton.Parent = MainFrame

local GoToPosButton = Instance.new("TextButton")
GoToPosButton.Size = UDim2.new(0.9, 0, 0, 30)
GoToPosButton.Position = UDim2.new(0.05, 0, 0, 175)
GoToPosButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
GoToPosButton.TextColor3 = Color3.fromRGB(255, 255, 255)
GoToPosButton.Text = "Go To Position"
GoToPosButton.Font = Enum.Font.Gotham
GoToPosButton.Parent = MainFrame

-- Create joystick for flight control
local JoystickFrame = Instance.new("Frame")
JoystickFrame.Size = UDim2.new(0, 150, 0, 150)
JoystickFrame.Position = UDim2.new(0.8, 0, 0.6, 0)
JoystickFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
JoystickFrame.BackgroundTransparency = 0.5
JoystickFrame.BorderSizePixel = 0
JoystickFrame.Active = true
JoystickFrame.Draggable = true
JoystickFrame.Visible = false
JoystickFrame.Parent = ScreenGui

local JoystickBackground = Instance.new("Frame")
JoystickBackground.Size = UDim2.new(0, 100, 0, 100)
JoystickBackground.Position = UDim2.new(0.5, -50, 0.5, -50)
JoystickBackground.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
JoystickBackground.BackgroundTransparency = 0.7
JoystickBackground.BorderSizePixel = 0
JoystickBackground.Parent = JoystickFrame

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(1, 0)
UICorner.Parent = JoystickBackground

local JoystickHandle = Instance.new("Frame")
JoystickHandle.Size = UDim2.new(0, 40, 0, 40)
JoystickHandle.Position = UDim2.new(0.5, -20, 0.5, -20)
JoystickHandle.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
JoystickHandle.BackgroundTransparency = 0.5
JoystickHandle.BorderSizePixel = 0
JoystickHandle.Parent = JoystickBackground

local UICornerHandle = Instance.new("UICorner")
UICornerHandle.CornerRadius = UDim.new(1, 0)
UICornerHandle.Parent = JoystickHandle

-- Air Walk variables
local airBlocks = {}
local airWalkConnection = nil
local lastPosition = RootPart.Position

-- Function to create temporary air block
local function CreateAirBlock(position)
    local block = Instance.new("Part")
    block.Size = Vector3.new(4, 1, 4)
    block.Position = position
    block.Anchored = true
    block.CanCollide = true
    block.Transparency = 0.7
    block.Color = Color3.fromRGB(100, 200, 255)
    block.Material = Enum.Material.Neon
    block.Name = "AirBlock_" .. math.random(10000, 99999)
    block.Parent = workspace
    
    -- Automatically disappear after 1 second
    delay(1, function()
        if block and block.Parent then
            block:Destroy()
        end
    end)
    
    table.insert(airBlocks, block)
    return block
end

-- Function to clean up old air blocks
local function CleanAirBlocks()
    for i = #airBlocks, 1, -1 do
        if not airBlocks[i] or not airBlocks[i].Parent then
            table.remove(airBlocks, i)
        end
    end
end

-- Air Walk control function
local function StartAirWalk()
    AirWalkEnabled = true
    AirWalkButton.Text = "Air Walk: ON"
    AirWalkButton.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
    
    if Flying then
        ToggleFly() -- Выключаем полет если он включен
    end
    
    -- Create first block under player
    CreateAirBlock(RootPart.Position - Vector3.new(0, 4, 0))
    
    -- Air Walk control loop
    airWalkConnection = game:GetService("RunService").Heartbeat:Connect(function()
        if not AirWalkEnabled or not RootPart then
            return
        end
        
        -- Check if player is moving
        local currentPosition = RootPart.Position
        local distanceMoved = (currentPosition - lastPosition).Magnitude
        
        if distanceMoved > 2 then
            -- Create new air block where player is moving
            local moveDirection = (currentPosition - lastPosition).Unit
            local newBlockPos = currentPosition + moveDirection * 3 - Vector3.new(0, 4, 0)
            CreateAirBlock(newBlockPos)
            lastPosition = currentPosition
        end
        
        -- Clean up old blocks
        if #airBlocks > 20 then
            CleanAirBlocks()
        end
        
        -- Keep player from falling too fast
        if RootPart.Velocity.Y < -10 then
            RootPart.Velocity = Vector3.new(RootPart.Velocity.X, -10, RootPart.Velocity.Z)
        end
    end)
end

-- Stop Air Walk function
local function StopAirWalk()
    AirWalkEnabled = false
    AirWalkButton.Text = "Air Walk: OFF"
    AirWalkButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    
    if airWalkConnection then
        airWalkConnection:Disconnect()
        airWalkConnection = nil
    end
    
    -- Remove all air blocks
    for _, block in ipairs(airBlocks) do
        if block and block.Parent then
            block:Destroy()
        end
    end
    airBlocks = {}
end

-- Toggle Air Walk function
local function ToggleAirWalk()
    if AirWalkEnabled then
        StopAirWalk()
    else
        StartAirWalk()
    end
end

-- Save current position
local function SavePosition()
    if RootPart then
        SavedPosition = RootPart.Position
        SavePosButton.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
        wait(0.3)
        SavePosButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        print("Position saved: " .. tostring(SavedPosition))
    end
end

-- Fly to saved position
local function FlyToPosition()
    if not SavedPosition then
        print("No position saved!")
        return
    end
    
    if not Flying then
        ToggleFly() -- Включаем полет если он выключен
        wait(0.5) -- Даем время для активации полета
    end
    
    AutoFlyingToPosition = true
    GoToPosButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    
    -- Create a visual marker at the saved position
    local marker = Instance.new("Part")
    marker.Size = Vector3.new(2, 2, 2)
    marker.Position = SavedPosition + Vector3.new(0, 2, 0)
    marker.Anchored = true
    marker.CanCollide = false
    marker.Transparency = 0.5
    marker.Color = Color3.fromRGB(255, 255, 0)
    marker.Material = Enum.Material.Neon
    marker.Name = "PositionMarker"
    marker.Parent = workspace
    
    -- Auto-fly loop
    local flyToLoop
    flyToLoop = game:GetService("RunService").Heartbeat:Connect(function()
        if not Flying or not RootPart or not BV or not BG or not AutoFlyingToPosition then
            if flyToLoop then flyToLoop:Disconnect() end
            if marker then marker:Destroy() end
            GoToPosButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            return
        end
        
        local Camera = workspace.CurrentCamera
        BG.CFrame = Camera.CFrame
        
        -- Calculate direction to saved position
        local direction = (SavedPosition - RootPart.Position)
        local distance = direction.Magnitude
        
        -- Stop if we're close enough
        if distance < 5 then
            AutoFlyingToPosition = false
            if flyToLoop then flyToLoop:Disconnect() end
            if marker then marker:Destroy() end
            GoToPosButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            print("Arrived at saved position!")
            return
        end
        
        -- Normalize direction and apply speed
        direction = direction.Unit * FlySpeed
        
        -- Apply movement
        BV.Velocity = direction
    end)
end

-- Flight control variables
local BV, BG
local flightLoop
local joystickActive = false
local joystickDirection = Vector2.new(0, 0)

-- Function to boost player upward
local function BoostUp()
    if not RootPart then return end
    
    if Flying and BV then
        BV.Velocity = BV.Velocity + Vector3.new(0, 100, 0)
    else
        RootPart.Velocity = RootPart.Velocity + Vector3.new(0, 100, 0)
    end
    
    BoostButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    wait(0.3)
    BoostButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
end

-- Simple fly function
local function StartFlying()
    if AirWalkEnabled then
        StopAirWalk()
    end
    
    AutoFlyingToPosition = false
    
    if not RootPart then return end
    
    if BV then BV:Destroy() end
    if BG then BG:Destroy() end
    
    BV = Instance.new("BodyVelocity")
    BV.Velocity = Vector3.new(0, 0, 0)
    BV.MaxForce = Vector3.new(10000, 10000, 10000)
    BV.P = 1000
    BV.Name = "FlyVelocity"
    BV.Parent = RootPart
    
    BG = Instance.new("BodyGyro")
    BG.MaxTorque = Vector3.new(10000, 10000, 10000)
    BG.P = 1000
    BG.CFrame = RootPart.CFrame
    BG.Name = "FlyGyro"
    BG.Parent = RootPart
    
    Humanoid.PlatformStand = true
    JoystickFrame.Visible = true
    
    flightLoop = game:GetService("RunService").Heartbeat:Connect(function()
        if not Flying or not RootPart or not BV or not BG then
            if flightLoop then
                flightLoop:Disconnect()
            end
            return
        end
        
        -- If auto-flying to position, don't override with joystick
        if AutoFlyingToPosition then
            return
        end
        
        local Camera = workspace.CurrentCamera
        BG.CFrame = Camera.CFrame
        
        -- Calculate movement direction from joystick
        local moveDirection = Vector3.new(
            joystickDirection.X, 
            0, 
            joystickDirection.Y
        )
        
        -- Apply movement direction with speed
        if moveDirection.Magnitude > 0 then
            -- Transform joystick direction to camera space
            local cameraCFrame = Camera.CFrame
            local cameraRight = cameraCFrame.RightVector
            local cameraForward = cameraCFrame.LookVector
            
            -- Remove vertical component from camera vectors
            cameraRight = Vector3.new(cameraRight.X, 0, cameraRight.Z).Unit
            cameraForward = Vector3.new(cameraForward.X, 0, cameraForward.Z).Unit
            
            -- Calculate final movement direction
            local finalDirection = (cameraRight * moveDirection.X + cameraForward * moveDirection.Z) * FlySpeed
            
            -- Add vertical movement if needed
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then
                finalDirection = finalDirection + Vector3.new(0, FlySpeed, 0)
            elseif game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftShift) then
                finalDirection = finalDirection + Vector3.new(0, -FlySpeed, 0)
            end
            
            BV.Velocity = finalDirection
        else
            -- No joystick input, just apply vertical movement
            local verticalVelocity = Vector3.new(0, 0, 0)
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then
                verticalVelocity = Vector3.new(0, FlySpeed, 0)
            elseif game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftShift) then
                verticalVelocity = Vector3.new(0, -FlySpeed, 0)
            end
            BV.Velocity = verticalVelocity
        end
    end)
end

-- Stop flying function
local function StopFlying()
    AutoFlyingToPosition = false
    
    if flightLoop then
        flightLoop:Disconnect()
    end
    
    if BV then 
        BV:Destroy()
        BV = nil
    end
    
    if BG then 
        BG:Destroy()
        BG = nil
    end
    
    if Humanoid then
        Humanoid.PlatformStand = false
    end
    
    JoystickFrame.Visible = false
    joystickDirection = Vector2.new(0, 0)
    JoystickHandle.Position = UDim2.new(0.5, -20, 0.5, -20)
end

-- Toggle fly function
local function ToggleFly()
    Flying = not Flying
    
    if Flying then
        FlyButton.Text = "Fly: ON"
        FlyButton.BackgroundColor3 = Color3.fromRGB(0, 120, 0)
        StartFlying()
    else
        FlyButton.Text = "Fly: OFF"
        FlyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        StopFlying()
    end
end

-- Connect button clicks
FlyButton.MouseButton1Click:Connect(function()
    ToggleFly()
end)

BoostButton.MouseButton1Click:Connect(function()
    BoostUp()
end)

AirWalkButton.MouseButton1Click:Connect(function()
    ToggleAirWalk()
end)

SavePosButton.MouseButton1Click:Connect(function()
    SavePosition()
end)

GoToPosButton.MouseButton1Click:Connect(function()
    FlyToPosition()
end)

-- Touch events for mobile
local function connectTouchEvents(button, callback)
    button.MouseButton1Click:Connect(callback)
    
    button.TouchTap:Connect(function()
        callback()
    end)
end

-- Reconnect buttons with touch events
connectTouchEvents(FlyButton, ToggleFly)
connectTouchEvents(BoostButton, BoostUp)
connectTouchEvents(AirWalkButton, ToggleAirWalk)
connectTouchEvents(SavePosButton, SavePosition)
connectTouchEvents(GoToPosButton, FlyToPosition)

-- Fixed joystick control
local function updateJoystick(input)
    if not Flying then return end
    
    local backgroundAbsolutePosition = JoystickBackground.AbsolutePosition
    local backgroundSize = JoystickBackground.AbsoluteSize
    local center = backgroundAbsolutePosition + backgroundSize / 2
    local maxDistance = backgroundSize.X / 2
    
    local touchPosition = input.Position
    local delta = touchPosition - center
    local distance = math.min(delta.Magnitude, maxDistance)
    
    if distance > 0 then
        local direction = delta.Unit
        joystickDirection = Vector2.new(direction.X, direction.Y)
        
        -- Update joystick handle position (relative to JoystickBackground)
        local relativePosition = UDim2.new(0.5, direction.X * distance, 0.5, direction.Y * distance)
        JoystickHandle.Position = relativePosition
    else
        joystickDirection = Vector2.new(0, 0)
        JoystickHandle.Position = UDim2.new(0.5, -20, 0.5, -20)
    end
end

-- Fixed joystick input handling
JoystickBackground.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        joystickActive = true
        updateJoystick(input)
    end
end)

JoystickBackground.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch and joystickActive then
        updateJoystick(input)
    end
end)

JoystickBackground.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        joystickActive = false
        joystickDirection = Vector2.new(0, 0)
        JoystickHandle.Position = UDim2.new(0.5, -20, 0.5, -20)
    end
end)

-- Make joystick background touchable
JoystickBackground.Active = true

-- Anti-cheat bypass
game:GetService("RunService").Heartbeat:Connect(function()
    if Flying and RootPart then
        if not RootPart:FindFirstChild("FlyVelocity") or not RootPart:FindFirstChild("FlyGyro") then
            StopFlying()
            wait(0.1)
            if Flying then
                StartFlying()
            end
        end
    end
end)

-- Clean up on character change
Player.CharacterAdded:Connect(function(NewCharacter)
    Character = NewCharacter
    Humanoid = NewCharacter:WaitForChild("Humanoid")
    RootPart = NewCharacter:WaitForChild("HumanoidRootPart")
    
    if Flying then
        Flying = false
        FlyButton.Text = "Fly: OFF"
        FlyButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        StopFlying()
    end
    
    if AirWalkEnabled then
        StopAirWalk()
    end
    
    AutoFlyingToPosition = false
end)

print("Mobile fly system with joystick loaded!")
print("Use the joystick to control flight direction!")
print("Save positions and fly to them automatically!")
